package main;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.imageio.ImageIO;
import javax.swing.*;

import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDropEvent;
import java.io.File;
import java.io.FileInputStream;
import java.util.ArrayList;
import java.util.List;

public class init {
	
public static String saveLoc = "";	
public static List<String> Files = new ArrayList<String>();  
public static JList<Object> list = new JList<Object>(Files.toArray());
public static JFrame frame = new JFrame("ExcelBlender");
public static JScrollPane js = null;

@SuppressWarnings("serial")
public static void main(String[] args) {
	
		JButton myPanel = new JButton();
    	
	    myPanel.setEnabled(false);
	    
	    myPanel.setText("Drop Here");	
	    	
	    myPanel.setDropTarget(new DropTarget() {
	        public synchronized void drop(DropTargetDropEvent evt) {
	            try {
	                evt.acceptDrop(DnDConstants.ACTION_COPY);
	                @SuppressWarnings("unchecked")
					List<File> droppedFiles = (List<File>) evt
	                        .getTransferable().getTransferData(
	                                DataFlavor.javaFileListFlavor);
	                for (File file : droppedFiles) {
	                	Files.add(file.getName());
	                }
	                
	                frame.remove(js);
	                list = new JList<Object>(Files.toArray());
	                list.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
	                list.setLayoutOrientation(JList.VERTICAL);
	                list.setVisibleRowCount(-1);
	                list.setBounds(125, 5, 135, 85);
	                
	                JScrollPane js = new JScrollPane(list);
	                js.setBounds(125, 5, 135, 85);
	                
	                frame.add(list);
	                frame.repaint();
	                
	            } catch (Exception ex) {
	                ex.printStackTrace();
	            }
	        }
	    });
    
	myPanel.setBounds(25, 35, 95, 55);
	
    JButton xTool = new JButton();
    xTool.setText("Save");
    xTool.setEnabled(false);
    xTool.setBounds(25, 5, 95, 25);
     
    list.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
    list.setLayoutOrientation(JList.VERTICAL);
    list.setVisibleRowCount(-1);
    
    js.setBounds(125, 5, 135, 85);
    
	JFrame.setDefaultLookAndFeelDecorated(true);
	// Create and set up the frame.
	frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	frame.getContentPane().setLayout(null);
	// Create and set up the content pane.
	frame.add(myPanel);
	frame.add(xTool);
	frame.add(js);
	// Display the window.		
	frame.setResizable(false);
	frame.pack();
	frame.setSize(300, 130);
	
	Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
	frame.setLocation(dim.width/2-frame.getSize().width/2, dim.height/2-frame.getSize().height/2);
	
	frame.setVisible(true);

}

}